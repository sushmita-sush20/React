1) What is JSX?
A: JSX stands for JavaScript XML. JSX is HTML-like syntax. JSX is not HTML inside JavaScript. It's a syntax extension for JavaScript.

2) Superpowers of JSX?
A: 1. Declarative UI Syntax
   Ex: const element = <h1>Hello, world!</h1>;

   2. JavaScript Power Inside HTML
   Ex: const name = 'Sushmita';
       const greeting = <h1>Hello, {name}!</h1>;

   3. Component-Based Architecture
   Ex: function Welcome(props) {
       return <h1>Hello, {props.name}</h1>;
       }

   4. Conditional Rendering
   Ex: const isLoggedIn = true;
       const message = <p>{isLoggedIn ? 'Welcome back!' : 'Please log in.'}</p>;

   5. Power of Babel
   Ex: // JSX
      const element = <h1>Hello</h1>;
      // Compiles to:
      const element = React.createElement('h1', null, 'Hello');

   6. Prevent Injection Attacks
   Ex: const userInput = "<script>alert('Hacked!')</script>";
       const safe = <div>{userInput}</div>; // Treated as text, not HTML

   7. Inline Styling and Class Binding
   Ex: const style = { color: 'blue', fontSize: '20px' };
       const element = <h1 style={style}>Styled Text</h1>;

   8. Support for Fragments and Short Syntax
   Ex: <><h1>Heading</h1><p>Paragraph</p></>

3) Role of type attribute in script tag? What options can I use there?
A: The type attribute in the <script> tag specifies the MIME type (media type) of the script. It tells the browser what kind of script it is dealing with.

  => Identifies the scripting language used.
  => Helps browsers decide how to process the script.
  => Allows loading of non-JavaScript or JavaScript module scripts.
  => In modern HTML5, it’s optional for JavaScript, as the default is text/javascript.

4) {TitleComponent} vs {<TitleComponent/>} vs
{<TitleComponent></TitleComponent>} in JSX
A: 1. {TitleComponent} : Usually used when passing the component as a prop, or storing it in a variable.

   Ex: function Wrapper({ Component }) {
       return <div>{<Component />}</div>;
      }

       <Wrapper Component={TitleComponent} />
     ❗Not rendered directly — this just refers to the function or class.

    2. {<TitleComponent />} : Rendering the component as JSX.

    Ex: function App() {
         return (
            <div>
               {<TitleComponent />}
            </div>
         );
        }
     Same as just writing <TitleComponent /> directly — it's valid inside {} but usually not needed unless inside another JS expression.

     3. {<TitleComponent></TitleComponent>} : Use when the component has children or you prefer long-form.

     Ex: <TitleComponent>
            <p>This is a child element</p>
         </TitleComponent>
      Equivalent to <TitleComponent /> if no children are included.




